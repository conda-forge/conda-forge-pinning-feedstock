# This differs from target_platform in that it determines what subdir the compiler
#    will target, not what subdir the compiler package will be itself.
#    For example, we need a win-64 vs2008_win-32 package, so that we compile win-32
#    code on win-64 miniconda.
cross_compiler_target_platform:  # [win]
  - win-64                     # [win]
c_compiler:
  # legacy compilers for things that refuse to move
  - toolchain_c                # [(linux64 or osx) and (environ.get('CF_COMPILER_STACK') == 'comp4')]
  # modern compilers
  - gcc                        # [linux64]
  - clang                      # [osx]
  # non-standard arches get built with gcc
  - gcc                        # [aarch64]
  - gcc                        # [ppc64le]

  - vs2008                     # [win]
  - vs2015                     # [win]
  - vs2015                     # [win]
c_compiler_version:            # [unix]
  - 2                          # [(linux64 or osx) and (environ.get('CF_COMPILER_STACK') == 'comp4')]
  - 4                          # [osx]
  - 7                          # [linux64 or aarch64]
  - 8                          # [ppc64le]
cxx_compiler:
  # legacy compilers for things that refuse to move
  - toolchain_cxx              # [(linux64 or osx) and (environ.get('CF_COMPILER_STACK') == 'comp4')]
  # modern compilers
  - gxx                        # [linux64]
  - clangxx                    # [osx]

  - gxx                        # [aarch64]
  - gxx                        # [ppc64le]

  - vs2008                     # [win]
  - vs2015                     # [win]
  - vs2015                     # [win]
cxx_compiler_version:          # [unix]
  - 2                          # [(linux64 or osx) and (environ.get('CF_COMPILER_STACK') == 'comp4')]
  - 4                          # [osx]
  - 7                          # [linux64 or aarch64]
  - 8                          # [ppc64le]
fortran_compiler:              # [unix or win64]
  - toolchain_fort             # [(linux64 or osx) and (environ.get('CF_COMPILER_STACK') == 'comp4')]
  - gfortran                   # [(linux64 or osx)]
  - gfortran                   # [aarch64 or ppc64le]
  - flang                      # [win64]
fortran_compiler_version:      # [unix or win64]
  - 2                          # [(linux64 or osx) and (environ.get('CF_COMPILER_STACK') == 'comp4')]
  - 4                          # [osx]
  - 7                          # [linux64 or aarch64]
  - 8                          # [ppc64le]
  - 5                          # [win64]
m2w64_c_compiler:              # [win]
  - m2w64-toolchain            # [win]
m2w64_cxx_compiler:            # [win]
  - m2w64-toolchain            # [win]
m2w64_fortran_compiler:        # [win]
  - m2w64-toolchain            # [win]
CMAKE_GENERATOR:               # [win]
  - NMake Makefiles            # [win]
#
# Go Compiler Options
#

# The basic go-compiler with CGO disabled,
# It generates fat binaries without libc dependencies
# The activation scripts will set your CC,CXX and related flags
# to invalid values.
go_compiler:
  - go-nocgo
# The go compiler build with CGO enabled.
# It can generate fat binaries that depend on conda's libc.
# You should use this compiler if the underlying
# program needs to link against other C libraries, in which
# case make sure to add  'c,cpp,fortran_compiler' for unix
# and the m2w64 equivalent for windows.
cgo_compiler:
  - go-cgo
# The following are helpful variables to simplify go meta.yaml files.
target_goos:
  - linux                      # [linux]
  - darwin                     # [osx]
  - windows                    # [win]
target_goarch:
  - amd64                      # [x86_64]
target_goexe:
  -                            # [unix]
  - .exe                       # [win]
target_gobin:
  - '${PREFIX}/bin/'           # [unix]
  - '%PREFIX%\bin\'            # [win]

macos_min_version:             # [osx]
  - 10.9                       # [osx]
macos_machine:                 # [osx]
  - x86_64-apple-darwin13.4.0  # [osx]
MACOSX_DEPLOYMENT_TARGET:      # [osx]
  - 10.9                       # [osx]
target_platform:               # [win]
  - win-64                     # [win]
VERBOSE_AT:
  - V=1
VERBOSE_CM:
  - VERBOSE=1

# dual build configuration
channel_sources:
  - conda-forge,defaults                        # [not aarch64]
  - conda-forge,c4aarch64,defaults              # [aarch64]
  - conda-forge/label/cf201901,defaults         # [(linux64 or osx)     and (environ.get('CF_COMPILER_STACK') == 'comp4')]

channel_targets:
  - conda-forge main
  - conda-forge cf201901                        # [(linux64 or osx)     and (environ.get('CF_COMPILER_STACK') == 'comp4')]

docker_image:                                   # [linux]
  - condaforge/linux-anvil-comp7                # [linux64]
  - condaforge/linux-anvil                      # [linux64              and (environ.get('CF_COMPILER_STACK') == 'comp4')]

  - condaforge/linux-anvil-aarch64              # [aarch64]
  - condaforge/linux-anvil-ppc64le              # [ppc64le]

build_number_decrement:                         # [(linux64 or osx)     and (environ.get('CF_COMPILER_STACK') == 'comp4')]
  - 1000                                        # [(linux64 or osx)     and (environ.get('CF_COMPILER_STACK') == 'comp4')]
  - 0                                           # [(linux64 or osx)     and (environ.get('CF_COMPILER_STACK') == 'comp4')]

zip_keys:
  -
    - qt
  -
    - python
    - vc                        # [win]
    - c_compiler                # [win]
    - cxx_compiler              # [win]

  # Dual compiler zip
  -                             # [                                         (environ.get('CF_COMPILER_STACK') == 'comp4')]
    - c_compiler                # [(linux64 or osx)                     and (environ.get('CF_COMPILER_STACK') == 'comp4')]
    - cxx_compiler              # [(linux64 or osx)                     and (environ.get('CF_COMPILER_STACK') == 'comp4')]
    - fortran_compiler          # [(linux64 or osx)                     and (environ.get('CF_COMPILER_STACK') == 'comp4')]
    - channel_sources           # [(linux64 or osx)                     and (environ.get('CF_COMPILER_STACK') == 'comp4')]
    - channel_targets           # [(linux64 or osx)                     and (environ.get('CF_COMPILER_STACK') == 'comp4')]
    - docker_image              # [linux64                              and (environ.get('CF_COMPILER_STACK') == 'comp4')]
    - build_number_decrement    # [(linux64 or osx)                     and (environ.get('CF_COMPILER_STACK') == 'comp4')]

# aarch64 specifics because conda-build sets many things to centos 6
# this can probably be removed when conda-build gets updated defaults
# for aarch64
cdt_arch: aarch64                       # [aarch64]
cdt_name: cos7                          # [aarch64]
BUILD: aarch64-conda_cos7-linux-gnu     # [aarch64]

# TODO: remove these when run_exports are added to the packages.
pin_run_as_build:
  arpack:
    max_pin: x.x.x
  boost:
    max_pin: x.x.x
  boost-cpp:
    max_pin: x.x.x
  bzip2:
    max_pin: x
  cairo:
    max_pin: x.x
  curl:
    max_pin: x
  dbus:
    max_pin: x
  expat:
    max_pin: x.x
  ffmpeg:
    max_pin: x.x
  flann:
    max_pin: x.x.x
  fontconfig:
    max_pin: x
  freetype:
    max_pin: x
  gdal:
    max_pin: x.x
  gdk_pixbuf:
    max_pin: x.x.x
  geotiff:
    max_pin: x.x.x
  glew:
    max_pin: x.x
  glpk:
    max_pin: x.x
  gmp:
    max_pin: x
  graphviz:
    max_pin: x
  harfbuzz:
    max_pin: x
  hdf4:
    max_pin: x.x
  icu:
    max_pin: x
  isl:
    max_pin: x.x
  jasper:
    max_pin: x
  jpeg:
    max_pin: x
  libjpeg_turbo:
    max_pin: x
  json-c:
    max_pin: x.x
  jsoncpp:
    max_pin: x.x.x
  kealib:
    max_pin: x.x
  krb5:
    max_pin: x.x
  libblitz:
    max_pin: x.x
  libcurl:
    max_pin: x
  libdap4:
    max_pin: x.x
  libevent:
    max_pin: x.x.x
  libffi:
    max_pin: x.x
  libgdal:
    max_pin: x.x
  libiconv:
    max_pin: x.x
  libkml:
    max_pin: x.x
  libmatio:
    max_pin: x.x
  libnetcdf:
    max_pin: x.x.x
  libpcap:
    max_pin: x.x
  libpng:
    max_pin: x.x
  libprotobuf:
    max_pin: x.x
  librdkafka:
    max_pin: x.x.x
  librsvg:
    max_pin: x.x
  libspatialindex:
    max_pin: x.x
  libssh2:
    max_pin: x.x
  libsvm:
    max_pin: x.x
  libunwind:
    max_pin: x.x
  libtiff:
    max_pin: x
  libwebp:
    max_pin: x.x
  libxml2:
    max_pin: x.x
  libuuid:
    max_pin: x
  lz4-c:
    max_pin: x.x.x
  lzo:
    max_pin: x
  metis:
    max_pin: x.x
  mkl:
    max_pin: x
  mpfr:
    max_pin: x
  ncurses:
    max_pin: x.x
  netcdf-cxx4:
    max_pin: x.x
  netcdf-fortran:
    max_pin: x.x
  nettle:
    max_pin: x.x
  nlopt:
    max_pin: x.x.x
  nss:
    max_pin: x
  nspr:
    max_pin: x
  occt:
    max_pin: x.x
  openblas:
    max_pin: x.x.x
  openturns:
    max_pin: x.x
  openjpeg:
    max_pin: x.x
  openssl:
    max_pin: x.x.x
  pango:
    max_pin: x.x
  perl:
    max_pin: x.x.x
  pixman:
    max_pin: x.x
  poppler:
    max_pin: x.x
  proj4:
    max_pin: x.x.x
  qt:
    max_pin: x.x
  readline:
    max_pin: x
  r-base:
    max_pin: x.x
  snappy:
    max_pin: x.x.x
  sox:
    max_pin: x.x.x
  sqlite:
    max_pin: x
  sundials:
    max_pin: x.x
  tk:
    max_pin: x.x
  vc:
    max_pin: x
  vlfeat:
    max_pin: x.x.x
  vtk:
    max_pin: x.x.x
  xerces-c:
    max_pin: x.x.x
  xz:
    max_pin: x.x
  zeromq:
    max_pin: x.x
  zlib:
    max_pin: x.x
  zstd:
    max_pin: x.x.x

# Pinning packages

# blas
libblas:
  - 3.8 *netlib
libcblas:
  - 3.8 *netlib
liblapack:
  - 3.8.0 *netlib
liblapacke:
  - 3.8.0 *netlib
blas_impl:
  - openblas
  - mkl          # [x86 or x86_64]
  - blis         # [x86 or x86_64]

arpack:
  - 3.6.3
boost:
  - 1.70.0
boost_cpp:
  - 1.70.0
bzip2:
  - 1
cairo:
  - 1.16
curl:
  - 7.64
dbus:
  - 1
expat:
  - 2.2
ffmpeg:
  - 4.0
flann:
  - 1.9.1
fontconfig:
  - 2.13
freetype:
  - 2.9.1
gf2x:
  - 1.2
gdk_pixbuf:
  - 2.36.12
gsl:
  - 2.5
gstreamer:
  - 1.14.4
gst_plugins_base:
  - 1.14.4
gdal:
  - 2.4
geos:
  - 3.7.2
geotiff:
  - 1.5.1
giflib:
  - 5.1.7
glew:
  - 2.0.0
glib:
  - 2.58
glog:
  - 0.4.0
glpk:
  - 4.65
gmp:
  - 6
graphviz:
  - 2.38.0
harfbuzz:
  - 2
hdf4:
  - 4.2
hdf5:
  - 1.10.5
icu:
  - 58   # [not aarch64]
  - 60   # [aarch64]
isl:
  - 0.19
jasper:
  - 1.900.1
jpeg:
  - 9
libjpeg_turbo:
  - 2
json_c:
  - 0.13
jsoncpp:
  - 1.8.4
kealib:
  - 1.4.10
krb5:
  - 1.16
libblitz:
  - 0.10
libcurl:
  - 7.64
libdap4:
  - 3.19
libevent:
  - 2.1.10
libffi:
  - 3.2
libgdal:
  - 2.4
libiconv:
  - 1.15
libkml:
  - 1.3
libmatio:
  - 1.5
libnetcdf:
  - 4.6.2
libpcap:
  - 1.8
libpng:
  - 1.6.35   # [not (aarch64 or ppc64le)]
  - 1.6.36   # [aarch64 or ppc64le]
libprotobuf:
  - 3.8
librdkafka:
  - 0.11.5
librsvg:
  - 2.44.3
libsecret:
  - 0.18
libspatialindex:
  - 1.9
libssh2:
  - 1.8
libsvm:
  - 3.21
libtiff:
  - 4.0.9    # [not (aarch64 or ppc64le)]
  - 4.0.10   # [aarch64 or ppc64le]
libunwind:
  - 1.2
libwebp:
  - 1.0.0
libxml2:
  - 2.9
libuuid:
  - 2.32.1
lz4_c:
  - 1.8.3
lzo:
  - 2
metis:
  - 5.1
mkl:
  - 2019
mpfr:
  - 4
ncurses:
  - 6.1
netcdf_cxx4:
  - 4.3
netcdf_fortran:
  - 4.4
nettle:
  - 3.4
nss:
  - 3.39
nspr:
  - 4.20
nlopt:
  - 2.6.*
ntl:
  - 11.3.2
# we build for the oldest version possible of numpy for forward compatibility
numpy:
  - 1.14       # [not (aarch64 or ppc64le)]
  - 1.16       # [aarch64 or ppc64le]
occt:
  - 7.3
openblas:
  - 0.3.6
openjpeg:
  - 2.3
openssl:
  - 1.1.1a
openturns:
  - 1.13*
pango:
  - 1.40
pari:
  - 2.11
perl:
  - 5.26
pixman:
  - 0.38
poppler:
  - 0.67.0
proj4:
  - 6.1.0
python:
  - 2.7
  - 3.6
  - 3.7
qt:
  - 5.9
readline:
  - 8.0
r_base:
  - 3.6
singular:
  - 4.1.2
snappy:
  - 1.1.7
sox:
  - 14.4.2
sqlite:
  - 3
sundials:
  - 3.2 
tk:
  - 8.6                # [not ppc64le]
vc:                    # [win]
  - 9                  # [win]
  - 14                 # [win]
  - 14                 # [win]
vlfeat:
  - 0.9.20
vtk:
  - 8.2.0
x264:
  - 1!152.*
xerces_c:
  - 3.2.2
xz:
  - 5.2
zeromq:
  - 4.3.1
zlib:
  - 1.2
zstd:
  - 1.4.0
