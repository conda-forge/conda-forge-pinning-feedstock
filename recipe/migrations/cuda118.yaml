migrator_ts: 1748496951
__migrator:
  kind:
    version
  migration_number:
    1
  build_number:
    1
  # This is intended as a _manual_ migrator to re-add CUDA 11.8, after we
  # dropped it as version that's built by default; DO NOT unpause
  paused: true
  override_cbc_keys:
    - cuda_compiler_stub
  operation: key_add
  check_solvable: false
  primary_key: cuda_compiler_version
  additional_zip_keys:
    - cuda_compiler
    - docker_image         # [linux]
  ordering:
    cuda_compiler:
      - None
      - cuda-nvcc
      - nvcc
    cuda_compiler_version:
      - 12.4
      - 12.6
      - 12.8
      - None
      - 12.9
      - 11.8
    cuda_compiler_version_min:
      - 12.4
      - 12.6
      - 12.8
      - 12.9
      - 11.8

cuda_compiler:              # [(linux or win64) and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
  - nvcc                    # [(linux or win64) and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]

cuda_compiler_version:      # [(linux or win64) and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
  - 11.8                    # [(linux or win64) and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]

cuda_compiler_version_min:  # [linux or win64]
  - 11.8                    # [linux or win64]

c_compiler_version:         # [linux and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
  - 11                      # [linux and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]

cxx_compiler_version:       # [linux and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
  - 11                      # [linux and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]

fortran_compiler_version:   # [linux and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
  - 11                      # [linux and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]

docker_image:                                             # [os.environ.get("BUILD_PLATFORM", "").startswith("linux-") and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
  ### Docker images with CUDA 11.8 support

  # CUDA 11.8 builds (only x64 has a DEFAULT_LINUX_VERSION choice; alma9 not available)
  - quay.io/condaforge/linux-anvil-x86_64-cuda11.8:cos7   # [linux64 and os.environ.get("CF_CUDA_ENABLED", "False") == "True" and os.environ.get("BUILD_PLATFORM") == "linux-64" and os.environ.get("DEFAULT_LINUX_VERSION", "ubi8") == "cos7"]
  - quay.io/condaforge/linux-anvil-x86_64-cuda11.8:ubi8   # [linux64 and os.environ.get("CF_CUDA_ENABLED", "False") == "True" and os.environ.get("BUILD_PLATFORM") == "linux-64" and os.environ.get("DEFAULT_LINUX_VERSION", "ubi8") in ("ubi8", "alma8", "alma9")]

  # CUDA 11.8 arch: native compilation (build == target)
  - quay.io/condaforge/linux-anvil-aarch64-cuda11.8:ubi8  # [aarch64 and os.environ.get("CF_CUDA_ENABLED", "False") == "True" and os.environ.get("BUILD_PLATFORM") == "linux-aarch64"]
  - quay.io/condaforge/linux-anvil-ppc64le-cuda11.8:ubi8  # [ppc64le and os.environ.get("CF_CUDA_ENABLED", "False") == "True" and os.environ.get("BUILD_PLATFORM") == "linux-ppc64le"]

  # CUDA 11.8 arch: cross-compilation (build != target)
  - quay.io/condaforge/linux-anvil-x86_64-cuda11.8:ubi8   # [aarch64 and os.environ.get("CF_CUDA_ENABLED", "False") == "True" and os.environ.get("BUILD_PLATFORM") == "linux-64"]
  - quay.io/condaforge/linux-anvil-x86_64-cuda11.8:ubi8   # [ppc64le and os.environ.get("CF_CUDA_ENABLED", "False") == "True" and os.environ.get("BUILD_PLATFORM") == "linux-64"]
